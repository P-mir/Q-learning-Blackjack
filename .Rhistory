x<<-c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] <<- mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt <<- data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+geom_line()+
geom_point()
}
average_win()
dt <<- data.frame(x = x, y = y)
dt
y
length(y)
length(x )
dim(dt)
dim(data.frame(x = x, y = y))
average_win= function(sample = 30){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+geom_line()+
geom_point()
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+geom_line()+geom_smooth()
geom_point()
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+geom_line()
geom_point()
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line(color=y)+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,99))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y),color=y)+
geom_line()
geom_point()+
ggtitle("Learning curve")
}
average_win()
?aes
help(aes)
print(1)
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y),color=royalblue4)+
geom_line()
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color=royalblue4))+
geom_line()
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color=royalblue4))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color="royalblue4"))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color="royalblue"))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color="rblue"))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y,color="darkblue"))+
geom_line()+
geom_point()+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y)+
geom_line(color="darkblue"))+
geom_point(color="darkblue"))+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y)+
geom_line(color="darkblue"))+
geom_point(color="darkblue"))+
ggtitle("Learning curve")
}
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y)+
geom_line(color="darkblue"))+
geom_point(color="darkblue")+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y)+
geom_line(color="darkblue")+
geom_point(color="darkblue")+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30))#,seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line(color="darkblue")+
geom_point(color="darkblue")+
ggtitle("Learning curve")
}
average_win()
average_win= function(sample = 50){
x=c(seq(20,30),seq(100,990,10))#seq(1000,9500,500),seq(10000,12000,2000))
y=c()
perf= c()
k=1
for (i in x){
for(j in 1:sample){
game(i,res = FALSE)
perf[j] = n_win/n_game
}
y[k] = mean(perf)
k = k+1
print(i)
}
# plot(x,y)  #ggplot curve
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line(color="darkblue")+
geom_point(color="darkblue")+
ggtitle("Learning curve")
}
average_win()
var_plot= function(){
x=c(seq(1,99),seq(100,990,10),seq(1000,9500,500),seq(10000,12000,2000))
y=list()
k=1
for (i in x){
game(i,res = FALSE)
y[k]=n_win/n_game
k = k+1
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line(color="darkblue")+
geom_point(color="darkblue")+
ggtitle("")
}
var_plot()
var_plot= function(){
x=c(seq(1,99),seq(100,990,10),seq(1000,9500,500),seq(10000,12000,2000))
y=c()
k=1
for (i in x){
game(i,res = FALSE)
y[k]=n_win/n_game
k = k+1
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_line(color="darkblue")+
geom_point(color="darkblue")+
ggtitle("")
}
var_plot()
var_plot= function(){
x=c(seq(1,99),seq(100,990,10),seq(1000,9500,500),seq(10000,12000,2000))
y=c()
k=1
for (i in x){
game(i,res = FALSE)
y[k]=n_win/n_game
k = k+1
}
dt = data.frame(x = x, y = y)
ggplot(dt, aes(x , y))+
geom_point(color="blue")+
ggtitle("")
}
var_plot()
game(5000)
game(30000)
model <- keras_model_sequential()
model %>%
layer_dense(units = 2, input_shape = c(784)) %>%
layer_activation('relu') %>%
layer_dense(units = 10) %>%
layer_activation('relu') %>%
layer_dense(units = 4) %>%
layer_activation('linear') %>%
summary(model)
model <- keras_model_sequential()
install_keras()
setwd("C:/Users/p/Documents/GitHub/Q-learning-Blackjack")
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
source('C:/Users/p/Documents/GitHub/Q-learning-Blackjack/Environment.R', echo=TRUE)
#to see what's happening use "loud":          game(1000,"loud")
# to simulate a drunk player (Random choice): game(1000,method="R")
# To benchmark with a careful strategy:      game(10000,method="C")
game(n_episodes=100000,infos = "quiet",method="Q",res=TRUE)
