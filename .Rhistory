source('~/Project2-Blackjack/Environment.R', echo=TRUE)
source('~/Project2-Blackjack/Q-learning.R', echo=TRUE)
source('~/Project2-Blackjack/Environment.R', echo=TRUE)
end <<- FALSE
source('~/Project2-Blackjack/Q-learning.R', echo=TRUE)
# 1 = Ace, 2-10 = Number cards, Jack/Queen/King = 10
deck = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10)
draw_card = function(deck){
return(sample(deck,1))
}
draw_hand = function(){
return(c(draw_card(deck),draw_card(deck)))
}
sum_hand = function(hand){
return(sum(hand))
}
is_bust = function(hand){
if (sum_hand(hand)>21){
bust = TRUE
}
else {bust=FALSE}
return(bust)
}
score = function(hand){
if (is_bust(hand)){
return(0)
}
else {
return(sum_hand(hand))
}
}
step = function(infos = "quiet",method = "Q"){
state <<- row_Qmatrix()
if (infos == "loud"){
cat("old state: ",state,"\n")
}
if (infos == "loud"){
cat("cards:",p_hand,"\n")
}
if (sum_hand(p_hand)==21){
end <<- TRUE
reward <<- 1
}
else{
if (method == "Q"){
action <<- choose_action(state)
}
else if (method =="R"){
action <<- random_action()
}
if (action=="D"){
p_hand <<- append(p_hand,draw_card(deck))
if (infos == "loud"){
cat("draw a card, hand is",p_hand)
}
if (is_bust(p_hand)){
end <<- TRUE
reward <<- -1
if (infos == "loud"){
print("bust")
}
}
else if (sum_hand(p_hand)==21){
end <<- TRUE
reward <<- 1
if (infos == "loud"){
print("blackjack")
}
}
else{
end <<- FALSE
reward <<- 0
if (infos == "loud"){
print('continue')
}
}
}
else{
if (infos == "loud"){
print('stop')
}
end <<- TRUE
while (sum_hand(d_hand) < 17){
d_hand <<- append(d_hand,draw_card(deck))
if (infos == "loud"){
cat("dealer add a cart, hand is",d_hand,"\n")
}
}
if (score(p_hand)>score(d_hand)){
reward <<- 1
if (infos == "loud"){
print("win \n")
}
}
else if (score(p_hand)<score(d_hand)){
reward <<- -1
if (infos == "loud"){
print("loose \n")
}
}
else {reward <<- 0}
}
}
if (infos == "loud"){
cat(reward,score(p_hand),score(d_hand),end,"\n")
}
state1 <<- row_Qmatrix()
if (infos == "loud"){
cat("new state: ",state1,"\n\n")
}
}
count = function(){
if (reward == 1){
n_win <<- n_win+1
} else if (reward == -1){
n_loss <<- n_loss+1
} else{
n_draw <<- n_draw+1
}
n_game <<- n_game+1
}
reset = function(){
p_hand<<-draw_hand()
d_hand<<-draw_hand()
}
reset_stat = function(){
n_game <<- 0
n_win <<- 0
n_loss <<- 0
n_draw <<- 0
}
row_Qmatrix = function(){
if( score(p_hand) == 0){
}
else if (score(p_hand) == 21){
}
else{
state <<- score(p_hand) + 19 * d_hand[1] - 20
}
return(state)
}
party = function(infos = "quiet",method = "Q"){
reset()
end <<- FALSE
while(end == FALSE){
step(infos, method)
Qlearning()
}
}
game = function(n_episodes,infos = "quiet",method = "Q"){
reset_stat()
reset_Qmatrix()
for (i in 1:n_episodes){
party(infos, method)
count()
}
cat(n_win/n_game,"win: ",n_win,"loss: ",n_loss,"game: ",n_game,"draw",n_draw,"\n payoff: ",n_win-n_loss)
}
game(1)
end <<- FALSE
end <<- FALSE
end=FALSE
game(1)
game(100,"loud")
game(100000,"loud")
install.packages("keras")
library(keras)
Sequential()
library(keras)
keras_model_sequential()
model <- keras_model_sequential()
model.add(Activation('relu'))
RMSprop()
model <- keras_model_sequential()
model %>%
layer_dense(units = 2, input_shape = c(784)) %>%
layer_activation('relu') %>%
layer_dense(units = 10) %>%
layer_activation('relu') %>%
layer_dense(units = 4) %>%
layer_activation('linear') %>%
summary(model)
model <- keras_model_sequential()
install_keras()
library(keras)
install_keras()
install_keras()
library(keras)
install_keras()
install_keras()
install_keras()
source('~/Project2-Blackjack/Q-learning.R', echo=TRUE)
source('~/Project2-Blackjack/Environment.R', echo=TRUE)
end=FALSE
source('~/Project2-Blackjack/Environment.R', echo=TRUE)
View(Q)
View(Q)
table = matrix(nrow = 19,ncol = 10)
colnames(Q)[which.max(Q[state,])
colnames(Q)[which.max(Q[1,])]
game(100000)
colnames(Q)[which.max(Q[2,])]
colnames(Q)[which.max(Q[15,])]
table = matrix(nrow = 19,ncol = 10)
k=0
for (j in 1:10){
for (i in 1:19){
table[i,j] = colnames(Q)[which.max(Q[i+k,])]
}
k= k+19
}
View(table)
View(table)
colnames(table) <<- seq(1,10)
rownames(table) <<- seq(2,20)
table = matrix(nrow = 19,ncol = 10)
colnames(table) <<- seq(1,10)
table = matrix(0,nrow = 19,ncol = 10)
colnames(table) <<- seq(1,10)
table = matrix(nrow = 19,ncol = 10)
View(table)
View(table)
table
table = data.frame(nrow = 19,ncol = 10)
colnames(table) <<- seq(1,10)
table = matrix(nrow = 19,ncol = 10)
colnames(table) = seq(1,10)
rownames(table) = seq(2,20)
k=0
for (j in 1:10){
for (i in 1:19){
table[i,j] = colnames(Q)[which.max(Q[i+k,])]
}
k= k+19
}
kable(table)
install.packages(knitr)
library(knitr)
kable(table)
keras_model_sequential()
install_keras()
